---
const { servicio } = Astro.props;

import ServiciosOptions from "../assets/ServiciosOptions.js";
import PackagingProducts from "../assets/PackagingProducts.js";
import ImprentaProducts from "../assets/ImprentaProducts.js";

const servicioData = ServiciosOptions.find((s) => s.href === servicio);
const arrayProducts = servicioData ? (servicioData.title === "Imprenta" ? ImprentaProducts : PackagingProducts) : [];
---

<main class="pt-14 w-full">
  {servicioData ? (
    <>
      <div
        class="w-full h-[400px] flex flex-col justify-center items-center bg-cover bg-center"
        style={`background-image: url('${servicioData.image}')`}
      >
        <h1 class="text-3xl font-bold w-1/5 text-center">{servicioData.title}</h1>
        <p class="w-1/5">{servicioData.description}</p>
      </div>

      <section class="w-full py-10 flex flex-col items-center bg-red-500">
        <h2 class="text-3xl font-bold mb-10 text-center">Nuestros Servicios</h2>
          <div class="flex w-2/3 justify-between">
            {arrayProducts.map((product) => (
              <div class="w-64 h-64 perspective flip-card cursor-pointer">
                <div class="relative w-full h-full transition-transform duration-500 transform-style-3d">
                  <!-- Frente (Imagen y Título) -->
                  <div class="absolute inset-0 flex flex-col items-center justify-center">
                    <img src={product.icon} alt={`icon-${product.title}`} class="w-16 h-16" />
                    <p class="mt-2 text-lg font-semibold text-gray-800">{product.title}</p>
                  </div>

                  <!-- Reverso (Descripción) -->
                  <div class="absolute inset-0 flex items-center justify-center transform rotateY(180deg)">
                    <p class="text-gray-700 text-center p-4">{product.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        
      </section>
      <section class="w-full py-10 flex flex-col items-center bg-yellow-500">
        <h2 class="text-3xl font-bold mb-10 text-center">Productos</h2>
         <div class="w-full flex flex-col items-center justify-center">
           {arrayProducts.map((product) => (
            <h3>{product.title}</h3>
            <div class="w-2/3 flex flex-wrap justify-between">
              {product.products.map((item) => (
                <div class="w-64 h-64 cursor-pointer product-card relative">
                <!-- Imagen y Título -->
                <div class="absolute inset-0 flex flex-col items-center justify-center">
                  <img src={item.image} alt={`icon-${product.title}`} class="w-16 h-16" />
                  <p class="mt-2 text-lg font-semibold text-gray-800">{item.title}</p>
                </div>

                <!-- Descripción y Características -->
                <div class="description-container absolute inset-0 flex flex-col justify-center items-center bg-white text-gray-700 p-4 transform translate-y-full transition-transform duration-500">
                  <p class="text-center">{item.description}</p>
                  <ul class="mt-4">
                    {item.caracteristicas.map((caracteristica) => (
                      <li class="mt-2">{caracteristica}</li>
                    ))}
                  </ul>
                </div>
              </div>
              ))}
            </div>
           ))}
         </div> 
    
      </section>
    </>
    
  ) : (
    <h1>Servicio no encontrado</h1>
  )}
</main>

<script is:inline>
  function toggleFlip(event) {
    const card = event.currentTarget.querySelector(".relative");
    card.classList.toggle("flipped");
  }

  // Añadir event listeners una vez que el componente esté cargado
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".flip-card").forEach((card) => {
      card.addEventListener("click", toggleFlip);
    });
  });

  function toggleDescription(event) {
    const description = event.currentTarget.querySelector(".description-container");
    description.classList.toggle("translate-y-0");
    description.classList.toggle("translate-y-full");
  }

  // Añadir event listeners una vez que el componente esté cargado
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".product-card").forEach((card) => {
      card.addEventListener("click", toggleDescription);
    });
  });
</script>

<style>
  /* Agregar estilo para el flip 3D */
  .flip-card {
    perspective: 1000px;
  }

  .relative {
    transition: transform 0.5s;
    transform-style: preserve-3d;
  }

  /* Rotación de 180 grados cuando la clase 'flipped' está activa */
  .relative.flipped {
    transform: rotateY(180deg);
  }

  /* Estilo para el frente de la tarjeta */
  .absolute:first-child {
    backface-visibility: hidden;
  }

  /* Estilo para el reverso de la tarjeta (descripción) */
  .absolute:last-child {
    background-color: transparent; /* Sin fondo blanco */
    color: #333; /* Color del texto de la descripción */
    text-align: center;
    padding: 10px;
    transform: rotateY(180deg); /* Inicialmente rotado para estar oculto */
    backface-visibility: hidden; /* Ocultar el reverso hasta que la tarjeta gire */
  }
</style>
